generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String?       @unique // ทำให้ email เป็น optional สำหรับ LINE users
  name         String?
  password     String?
  image        String?       // สำหรับ profile image จาก LINE
  lineId       String?       @unique // LINE User ID
  role         Role          @default(STUDENT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  courses      Course[]      @relation("InstructorCourses")
  enrollments  Enrollment[]
  orders       Order[]
  posts        Post[]        @relation("AuthorPosts")
  ebookReviews EbookReview[]
  couponUsages CouponUsage[]
  downloads    EbookDownload[]
  accounts     Account[]
  sessions     Session[]
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id           String       @id @default(uuid())
  title        String
  description  String?
  price        Float        @default(0)
  duration     Int?
  isFree       Boolean      @default(false)
  status       CourseStatus @default(DRAFT)
  instructorId String
  categoryId   String?
  coverImageUrl String?
  coverPublicId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chapters     Chapter[]
  category     Category?    @relation(fields: [categoryId], references: [id])
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  orders       Order[]
}

model Chapter {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime  @default(now())
  course    Course    @relation(fields: [courseId], references: [id])
  contents  Content[]
}

model Content {
  id          String      @id @default(uuid())
  title       String
  contentType ContentType
  contentUrl  String
  order       Int
  chapterId   String
  createdAt   DateTime    @default(now())
  chapter     Chapter     @relation(fields: [chapterId], references: [id])
}

model Enrollment {
  id         String       @id @default(uuid())
  userId     String
  courseId   String
  progress   Float        @default(0)
  status     EnrollStatus @default(ACTIVE)
  enrolledAt DateTime     @default(now())
  course     Course       @relation(fields: [courseId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  courses     Course[]
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String      @unique @default(cuid())
  userId         String
  courseId       String?
  ebookId        String?
  orderType      OrderType   @default(COURSE)
  status         OrderStatus @default(PENDING)
  subtotal       Float       // ราคาสินค้า
  shippingFee    Float       @default(0)
  tax            Float       @default(0)
  discount       Float       @default(0)
  couponDiscount Float       @default(0)
  total          Float
  notes          String?
  couponId       String?
  couponCode     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  user           User        @relation(fields: [userId], references: [id])
  course         Course?     @relation(fields: [courseId], references: [id])
  ebook          Ebook?      @relation(fields: [ebookId], references: [id])
  coupon         Coupon?     @relation(fields: [couponId], references: [id])
  items          OrderItem[]
  payment        Payment?
  shipping       Shipping?
  couponUsages   CouponUsage[]
  downloads      EbookDownload[]
}

model Payment {
  id           String        @id @default(uuid())
  orderId      String        @unique
  method       PaymentMethod @default(BANK_TRANSFER)
  status       PaymentStatus @default(PENDING)
  amount       Float
  paidAt       DateTime?
  ref          String?
  slipUrl      String?
  uploadedAt   DateTime?
  verifiedAt   DateTime?
  verifiedBy   String?       // Admin ID ที่ตรวจสอบ
  notes        String?
  
  // Slip Analysis Fields
  slipAnalysisData    String?      // JSON ข้อมูลการวิเคราะห์สลิป
  detectedAmount      Float?       // จำนวนเงินที่ AI ตรวจพบ
  detectedDate        DateTime?    // วันที่ที่ AI ตรวจพบ
  detectedTime        String?      // เวลาที่ AI ตรวจพบ
  senderAccount       String?      // บัญชีผู้โอน
  senderName          String?      // ชื่อผู้โอน
  senderBank          String?      // ธนาคารผู้โอน
  receiverAccount     String?      // บัญชีผู้รับ
  receiverName        String?      // ชื่อผู้รับ
  receiverBank        String?      // ธนาคารผู้รับ
  transactionRef      String?      // เลขอ้างอิงธุรกรรม
  confidenceScore     Float?       // คะแนนความเชื่อมั่นจาก AI
  validationScore     String?      // คะแนนการตรวจสอบ เช่น "3/3"
  validationPassed    Boolean?     // ผ่านการตรวจสอบหรือไม่
  analysisError       String?      // ข้อผิดพลาดในการวิเคราะห์
  lastAnalyzedAt      DateTime?    // วันที่วิเคราะห์ครั้งล่าสุด
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  order        Order         @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum ContentType {
  VIDEO
  PDF
  LINK
  QUIZ
  ASSIGNMENT
}

enum EnrollStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum OrderType {
  COURSE
  EBOOK
  MIXED
}

enum OrderStatus {
  PENDING
  PENDING_PAYMENT
  PENDING_VERIFICATION
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  PROMPTPAY
  TRUE_MONEY
  FREE
}

enum PaymentStatus {
  PENDING
  PENDING_VERIFICATION
  COMPLETED
  REJECTED
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  KERRY
  THAILAND_POST
  JT_EXPRESS
  FLASH_EXPRESS
  NINJA_VAN
  DHL
  FEDEX
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
}

enum EbookFormat {
  PDF
  EPUB
  MOBI
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum ApplicableType {
  ALL
  COURSE_ONLY
  EBOOK_ONLY
  CATEGORY
  SPECIFIC_ITEM
}

enum ItemType {
  COURSE
  EBOOK
}

model PostType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id                  String    @id @default(uuid())
  title               String
  content             String?
  excerpt             String?
  imageUrl            String?
  imageUrlMobileMode  String?
  slug                String?   @unique
  isActive            Boolean   @default(true)
  isFeatured          Boolean   @default(false)
  publishedAt         DateTime?
  authorId            String
  postTypeId          String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  author              User      @relation("AuthorPosts", fields: [authorId], references: [id])
  postType            PostType  @relation(fields: [postTypeId], references: [id])
}





model Ebook {
  id              String        @id @default(uuid())
  title           String
  description     String?
  author          String
  isbn            String?       @unique
  price           Float
  discountPrice   Float?
  coverImageUrl   String?
  previewUrl      String?
  fileUrl         String?
  fileSize        Int?
  pageCount       Int?
  language        String        @default("th")
  format          EbookFormat   @default(PDF)
  isPhysical      Boolean       @default(false)
  weight          Float?        // กรัม
  dimensions      String?       // "กว้าง x ยาว x สูง (ซม.)"
  downloadLimit   Int?          // จำกัดการดาวน์โหลด
  accessDuration  Int?          // ระยะเวลาการเข้าถึง (วัน)
  isActive        Boolean       @default(true)
  isFeatured      Boolean       @default(false)
  publishedAt     DateTime?
  categoryId      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  category        EbookCategory? @relation(fields: [categoryId], references: [id])
  orders          Order[]
  reviews         EbookReview[]
  downloads       EbookDownload[]
}

model EbookCategory {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ebooks      Ebook[]
}



model EbookReview {
  id        String   @id @default(uuid())
  ebookId   String
  userId    String
  rating    Int      @default(5)
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ebook     Ebook    @relation(fields: [ebookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([ebookId, userId])
}

model Shipping {
  id                String         @id @default(uuid())
  orderId           String         @unique
  recipientName     String
  recipientPhone    String
  address           String
  district          String
  province          String
  postalCode        String
  country           String         @default("Thailand")
  shippingMethod    ShippingMethod @default(STANDARD)
  shippingFee       Float          @default(0)
  trackingNumber    String?
  status            ShippingStatus @default(PENDING)
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  order             Order          @relation(fields: [orderId], references: [id])
}

model ExamCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exams       ExamBank[]
}

model ExamBank {
  id          String       @id @default(uuid())
  title       String
  description String?
  categoryId  String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    ExamCategory? @relation(fields: [categoryId], references: [id])
  files       ExamFile[]
}

model ExamFile {
  id         String   @id @default(uuid())
  examId     String
  fileName   String
  filePath   String
  fileType   String?
  fileSize   Int?
  uploadedAt DateTime @default(now())
  exam       ExamBank @relation(fields: [examId], references: [id], onDelete: Cascade)
}

// ระบบ Coupon/Discount Code
model Coupon {
  id              String         @id @default(uuid())
  code            String         @unique
  name            String         // ชื่อโปรโมชั่น
  description     String?
  type            CouponType     @default(PERCENTAGE)
  value           Float          // เปอร์เซ็นต์ หรือ จำนวนเงิน
  minOrderAmount  Float?         // ยอดขั้นต่ำ
  maxDiscount     Float?         // ส่วนลดสูงสุด (สำหรับ percentage)
  usageLimit      Int?           // จำนวนครั้งที่ใช้ได้ทั้งหมด
  usageCount      Int            @default(0)
  userUsageLimit  Int?           // จำนวนครั้งที่ user คนเดียวใช้ได้
  isActive        Boolean        @default(true)
  validFrom       DateTime
  validUntil      DateTime
  applicableType  ApplicableType @default(ALL)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  orders          Order[]
  usages          CouponUsage[]
  categories      CouponCategory[]
  items           CouponItem[]
}

model CouponUsage {
  id        String   @id @default(uuid())
  couponId  String
  userId    String
  orderId   String
  usedAt    DateTime @default(now())
  
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  
  @@unique([couponId, userId, orderId])
}

model CouponCategory {
  id         String   @id @default(uuid())
  couponId   String
  categoryId String
  itemType   ItemType // COURSE หรือ EBOOK
  
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  
  @@unique([couponId, categoryId, itemType])
}

model CouponItem {
  id       String   @id @default(uuid())
  couponId String
  itemId   String
  itemType ItemType
  
  coupon   Coupon   @relation(fields: [couponId], references: [id])
  
  @@unique([couponId, itemId, itemType])
}

// ระบบ Order Items (สำหรับ multiple items ต่อ order)
model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  itemType   ItemType
  itemId     String
  title      String   // เก็บชื่อสินค้าตอนสั่งซื้อ
  quantity   Int      @default(1)
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  
  order      Order    @relation(fields: [orderId], references: [id])
}

// ระบบ Download Management
model EbookDownload {
  id           String    @id @default(uuid())
  userId       String
  ebookId      String
  orderId      String
  downloadUrl  String
  expiresAt    DateTime
  downloadedAt DateTime?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  
  user         User      @relation(fields: [userId], references: [id])
  ebook        Ebook     @relation(fields: [ebookId], references: [id])
  order        Order     @relation(fields: [orderId], references: [id])
}
